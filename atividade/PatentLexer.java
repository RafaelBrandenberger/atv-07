/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>patent_lexer.flex</tt>
 */
public class PatentLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ABSTRACT = 2;
  public static final int CLAIMS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\30\1\44\1\44\1\27\22\0\1\7\12\0\1\34"+
    "\3\0\1\26\1\15\1\35\10\15\1\14\1\0\1\16\1\33\1\20"+
    "\2\0\1\37\1\0\1\40\1\25\13\0\1\13\2\0\1\10\1\0"+
    "\1\1\13\0\1\11\1\17\1\23\1\6\1\5\1\31\2\0\1\3"+
    "\1\0\1\42\1\22\1\41\1\2\1\24\1\0\1\43\1\36\1\12"+
    "\1\4\1\21\4\0\1\32\12\0\1\44\u1fa2\0\1\44\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\1\2\1\0\1\3\127\0\1\4\1\0"+
    "\1\5\6\0\1\6\1\7\55\0\1\10\10\0\1\11"+
    "\16\0\1\12\1\0\1\13\1\0\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b"+
    "\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353"+
    "\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b"+
    "\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3"+
    "\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb"+
    "\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3"+
    "\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b"+
    "\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43"+
    "\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b"+
    "\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93"+
    "\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb"+
    "\0\u0de0\0\157\0\u0e05\0\157\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99"+
    "\0\u0ebe\0\u0ee3\0\157\0\157\0\u0f08\0\u0f2d\0\u0f52\0\u0f77"+
    "\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f"+
    "\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7"+
    "\0\u11ec\0\u1211\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef"+
    "\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417"+
    "\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f"+
    "\0\u1564\0\u14d0\0\u1589\0\u15ae\0\u15d3\0\u15f8\0\u161d\0\u1642"+
    "\0\u1667\0\u168c\0\u161d\0\u16b1\0\u16d6\0\u16fb\0\u1720\0\u1745"+
    "\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848\0\u186d"+
    "\0\u1892\0\157\0\u18b7\0\157\0\u18dc\0\157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\5\4\1\6\6\4\1\7\10\4\2\6"+
    "\13\4\1\0\16\10\1\11\26\10\16\12\1\13\26\12"+
    "\47\0\1\14\51\0\1\6\17\0\2\6\33\0\1\15"+
    "\3\0\1\16\5\0\1\17\13\0\16\10\1\0\26\10"+
    "\17\20\1\21\1\4\5\20\1\22\16\20\16\12\1\0"+
    "\26\12\17\20\1\23\1\4\5\20\1\24\16\20\3\0"+
    "\1\25\61\0\1\26\31\0\1\27\63\0\1\30\20\0"+
    "\20\20\1\4\44\20\1\4\1\20\1\31\41\20\1\32"+
    "\1\4\44\20\1\4\1\20\1\33\41\20\1\34\1\4"+
    "\24\20\4\0\1\35\53\0\1\36\33\0\1\37\44\0"+
    "\1\40\42\0\20\20\1\4\3\20\1\41\40\20\1\4"+
    "\1\20\1\42\42\20\1\4\3\20\1\43\40\20\1\4"+
    "\1\20\1\44\22\20\5\0\1\45\60\0\1\46\27\0"+
    "\1\47\44\0\1\50\40\0\20\20\1\4\2\20\1\51"+
    "\41\20\1\4\3\20\1\52\40\20\1\4\2\20\1\53"+
    "\41\20\1\4\3\20\1\54\20\20\6\0\1\55\55\0"+
    "\1\56\32\0\1\57\46\0\1\60\35\0\20\20\1\4"+
    "\21\20\1\61\22\20\1\4\2\20\1\62\41\20\1\4"+
    "\21\20\1\63\22\20\1\4\2\20\1\64\21\20\7\0"+
    "\1\65\57\0\1\66\60\0\1\67\20\0\1\70\32\0"+
    "\20\20\1\4\22\20\1\71\21\20\1\4\21\20\1\72"+
    "\22\20\1\4\22\20\1\73\21\20\1\4\21\20\1\74"+
    "\2\20\10\0\1\75\37\0\1\76\61\0\1\77\27\0"+
    "\1\100\41\0\20\20\1\4\1\101\43\20\1\4\22\20"+
    "\1\102\21\20\1\4\1\103\43\20\1\4\22\20\1\104"+
    "\1\20\4\0\1\105\63\0\1\106\37\0\1\107\60\0"+
    "\1\110\12\0\20\20\1\4\3\20\1\111\40\20\1\4"+
    "\1\112\43\20\1\4\3\20\1\113\40\20\1\4\1\114"+
    "\23\20\11\0\1\115\44\0\1\116\52\0\1\117\32\0"+
    "\1\120\37\0\4\20\1\121\13\20\1\4\44\20\1\4"+
    "\3\20\1\122\24\20\1\123\13\20\1\4\44\20\1\4"+
    "\3\20\1\124\20\20\4\0\1\125\44\0\1\126\60\0"+
    "\1\127\57\0\1\130\11\0\5\20\1\131\12\20\1\4"+
    "\30\20\1\132\13\20\1\4\31\20\1\133\12\20\1\4"+
    "\30\20\1\134\13\20\1\4\24\20\5\0\1\135\42\0"+
    "\1\136\100\0\1\137\1\140\40\0\1\141\10\0\20\20"+
    "\1\142\31\20\1\143\12\20\1\4\44\20\1\144\31\20"+
    "\1\145\12\20\1\4\24\20\12\0\1\146\56\0\1\147"+
    "\37\0\1\150\47\0\1\151\57\0\1\152\7\0\20\20"+
    "\1\153\44\20\1\154\24\20\7\0\1\155\37\0\1\156"+
    "\54\0\1\157\43\0\1\160\53\0\1\161\37\0\1\162"+
    "\40\0\1\163\41\0\1\164\43\0\1\165\57\0\1\166"+
    "\37\0\1\167\60\0\1\170\55\0\1\171\47\0\1\172"+
    "\22\0\1\173\31\0\1\174\51\0\1\175\44\0\1\176"+
    "\45\0\1\177\52\0\1\200\31\0\1\201\43\0\1\202"+
    "\63\0\1\203\37\0\1\204\26\0\16\205\1\0\26\205"+
    "\2\0\1\206\47\0\1\207\43\0\1\210\66\0\1\211"+
    "\16\0\16\205\1\212\26\205\4\0\1\213\54\0\1\214"+
    "\46\0\1\215\45\0\1\216\53\0\1\217\32\0\1\220"+
    "\46\0\1\221\54\0\1\222\36\0\1\223\43\0\1\224"+
    "\34\0\1\225\63\0\1\226\35\0\1\227\43\0\1\230"+
    "\46\0\1\231\41\0\1\232\17\0\1\232\26\0\1\233"+
    "\45\0\1\234\52\0\1\235\34\0\1\236\46\0\1\237"+
    "\42\0\1\240\51\0\1\241\47\0\1\242\16\0\16\243"+
    "\1\0\11\243\1\0\14\243\26\0\1\244\23\0\1\245"+
    "\70\0\1\246\36\0\1\247\23\0\1\250\66\0\1\251"+
    "\25\0\1\252\43\0\1\253\42\0\1\254\44\0\1\255"+
    "\47\0\1\256\43\0\1\257\44\0\1\260\76\0\1\261"+
    "\26\0\1\262\31\0\1\263\57\0\1\264\62\0\1\265"+
    "\26\0\1\266\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6401];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\0\1\1\127\0\1\11\1\0"+
    "\1\11\6\0\2\11\55\0\1\1\10\0\1\1\16\0"+
    "\1\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  String number = null;
  String title = null;
  String publicationDate = null;
  String abstractText = "";
  StringBuilder claims = new StringBuilder();

  boolean readingAbstract = false;
  boolean readingClaims = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PatentLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 13: break;
          case 2: 
            { if (readingAbstract) abstractText += yytext();
            } 
            // fall through
          case 14: break;
          case 3: 
            { if (readingClaims) claims.append(yytext());
            } 
            // fall through
          case 15: break;
          case 4: 
            { readingAbstract = true;
            } 
            // fall through
          case 16: break;
          case 5: 
            { readingClaims = true;
            } 
            // fall through
          case 17: break;
          case 6: 
            { yybegin(YYINITIAL); readingAbstract = false;
            } 
            // fall through
          case 18: break;
          case 7: 
            { yybegin(YYINITIAL); readingClaims = false;
            } 
            // fall through
          case 19: break;
          case 8: 
            { number = yytext().replaceAll("\\D+", "");
            } 
            // fall through
          case 20: break;
          case 9: 
            { String[] parts = yytext().split("</b>");
    if (parts.length > 1) {
      publicationDate = parts[1].replaceAll("<.*?>", "").trim();
    } else {
      publicationDate = yytext().replaceAll("<[^>]+>", "").replace("Publication Date:", "").trim();
    }
            } 
            // fall through
          case 21: break;
          case 10: 
            { title = yytext().replaceAll("<[^>]+>", "");
            } 
            // fall through
          case 22: break;
          case 11: 
            { yybegin(CLAIMS);
    claims = new StringBuilder();
            } 
            // fall through
          case 23: break;
          case 12: 
            { yybegin(ABSTRACT);
    abstractText = "";
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
